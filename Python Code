Python Code



from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Convolution2D, MaxPooling2D
from keras.optimizers import SGD,RMSprop,adam
from keras.utils import np_utils

import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import os
import theano
from PIL import Image
from numpy import *
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
img_rows, img_cols = 200, 200
img_channels = 1
path1='C:/Users/Desktop/FRDB1/images'
path2='C:/Users/Desktop/FRDB1/resized_images'

77

listing = os.listdir(path1)
num_samples=size(listing)
print(num_samples)
for file in listing:
im = Image.open(path1 + '//' + file)
img = im.resize((img_rows,img_cols))
gray = img.convert('L')
#need to do some more processing here
gray.save(path2 +'//' + file, "JPEG")
imlist = os.listdir(path2)

im1 = array(Image.open(path2 + '//'+ imlist[0])) # open one image to get size
m,n = im1.shape[0:2] # get the size of the images
imnbr = len(imlist) # get the number of images
immatrix = array([array(Image.open(path2+ '//' + im2)).flatten()
for im2 in imlist],'f')
label=np.ones((num_samples,),dtype = int)
label[0:73]=0
label[73:145]=1
label[145:217]=2
label[217:289]=3
label[289:361]=4
data,Label = shuffle(immatrix,label, random_state=2)
train_data = [data,Label]
img=immatrix[167].reshape(img_rows,img_cols)
plt.imshow(img)

78

plt.imshow(img,cmap='gray')
print (train_data[0].shape)
print (train_data[1].shape)
#batch_size to train
batch_size = 64
# number of output classes
nb_classes = 5
# number of epochs to train
nb_epoch = 20
# number of convolutional filters to use
nb_filters = 32
# size of pooling area for max pooling
nb_pool = 2
# convolution kernel size
nb_conv = 3
(X, y) = (train_data[0],train_data[1])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)
X_train = X_train.reshape(X_train.shape[0], 1, img_rows, img_cols)
X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols)
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255
print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')

79
Y_train = np_utils.to_categorical(y_train, nb_classes)
Y_test = np_utils.to_categorical(y_test, nb_classes)
i = 100
plt.imshow(X_train[i, 0], interpolation='nearest')
print("label : ", Y_train[i,:])
import keras
from keras.models import Sequential,Input,Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.layers.normalization import BatchNormalization
from keras.layers.advanced_activations import LeakyReLU
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),activation='linear',input_shape=(1,200,200),padding='same'))
model.add(LeakyReLU(alpha=0.9))
model.add(MaxPooling2D((2, 2),padding='same'))
model.add(Conv2D(64, (3, 3), activation='linear',padding='same'))
model.add(LeakyReLU(alpha=0.9))
model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
model.add(Conv2D(128, (3, 3), activation='linear',padding='same'))
model.add(LeakyReLU(alpha=0.9))
model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
model.add(Flatten())
model.add(Dense(128, activation='linear'))
model.add(LeakyReLU(alpha=0.9))
model.add(Dense(nb_classes, activation='softmax'))

80
model.compile(loss=keras.losses.categorical_crossentropy,
optimizer=keras.optimizers.Adam(),metrics=['accuracy'])
model.summary()
face_train= model.fit(X_train,Y_train, batch_size=batch_size,epochs=nb_epoch,verbose=1,validation_data=(X_test,
Y_test))
im = plt.imread('C:/Users/CPNARANI/Desktop/FRDB1/resized_images/Sn10.jpg')
#img = im.resize((img_rows,img_cols))
#gray = img.convert('L')
imag1 = resize(im, (1,200,200))
predictions=model.predict(np.array([imag1,]))
print(predictions)
number_to_class = ['frontal', 'sixty', 'nsixty', 'thirty','nthirty']
index = np.argsort(predictions[0,:])
print("Most likely class:", number_to_class[index[4]], "-- Probability:", predictions[0,index[4]])
print("Second most likely class:", number_to_class[index[3]], "-- Probability:", predictions[0,index[3]])

#%%
"""/******************************************************************************************
***********************************/"""
path1i='C:/Users/Desktop/New folder (2)/image'
path2i='C:/Users/Desktop/New folder (2)/resized'
listing1 = os.listdir(path1i)
num_samples1=size(listing1)
print(num_samples1)
for file in listing1:
im = Image.open(path1i + '//' + file)
img = im.resize((img_rows,img_cols))

81

gray = img.convert('L')
#need to do some more processing here
gray.save(path2i +'//' + file, "JPEG")
imlist1 = os.listdir(path2i)
im = plt.imread('C:/Users/Desktop/New folder (2)/resized/6.jpg')
#img = im.resize((img_rows,img_cols))
#gray = img.convert('L')
imag1 = resize(im, (1,200,200))
predictions=model.predict(np.array([imag1,]))
print(predictions)
number_to_class = ['frontal', 'sixty', 'nsixty', 'thirty','nthirty']
index = np.argsort(predictions[0,:])
print("Most likely class:", number_to_class[index[4]], "-- Probability:", predictions[0,index[4]])
print("Second most likely class:", number_to_class[index[3]], "-- Probability:", predictions[0,index[3]])
#%%
